//https://github.com/jae-jae/l.userjs.js
! function (window, undefined) {
    var isA = function (e, t) {
            return e instanceof(t || Array)
        },
        D = document,
        getElementsByTagName = "getElementsByTagName",
        length = "length",
        readyState = "readyState",
        onreadystatechange = "onreadystatechange",
        scripts = D[getElementsByTagName]("script"),
        scriptTag = scripts[scripts[length] - 1],
        script = scriptTag.innerHTML.replace(/^\s+|\s+$/g, "");
    if (!window.ljs) {
        var checkLoaded = scriptTag.src.match(/checkLoaded/) ? 1 : 0,
            header = D[getElementsByTagName]("head")[0] || D.documentElement,
            urlParse = function (e) {
                var t = {};
                return t.u = e.replace(/#(=)?([^#]*)?/g, function (e, a, i) {
                    return t[a ? "f" : "i"] = i, ""
                }), t
            },
            appendElmt = function (e, t, a) {
                var i, n = D.createElement(e);
                a && (n[readyState] ? n[onreadystatechange] = function () {
                    "loaded" !== n[readyState] && "complete" !== n[readyState] || (n[onreadystatechange] = null,
                        a())
                } : n.onload = a);
                for (i in t) t[i] && (n[i] = t[i]);
                header.appendChild(n)
            },
            ajaxExec = function (url, success, error) {
                GM_xmlhttpRequest({
                    method: "GET",
                    url: url,
                    onload: function (res) {
                        (new Function(res.responseText))(), success()
                    },
                    onerror: function () {
                        error && error()
                    }
                })
            },
            load = function (e, t) {
                if (this.aliases && this.aliases[e]) {
                    var a = this.aliases[e].slice(0);
                    return isA(a) || (a = [a]), t && a.push(t), this.load.apply(this, a)
                }
                if (isA(e)) {
                    for (var i = e[length]; i--;) this.load(e[i]);
                    return t && e.push(t), this.load.apply(this, e)
                }
                return e.match(/\.css\b/) ? this.loadcss(e, t) : this.loadjs(e, t)
            },
            exec = function (e, t) {
                if (this.aliases && this.aliases[e]) {
                    var a = this.aliases[e].slice(0);
                    return isA(a) || (a = [a]), t && a.push(t), this.exec.apply(this, a)
                }
                if (isA(e)) {
                    for (var i = e[length]; i--;) this.exec(e[i]);
                    return t && e.push(t), this.exec.apply(this, e)
                }
                return e.match(/\.css\b/) ? this.loadcss(e, t) : this.execJs(e, t)
            },
            loaded = {},
            loader = {
                aliases: {},
                loadjs: function (e, t) {
                    var a = urlParse(e);
                    return e = a.u, loaded[e] === !0 ? (t && t(), this) : loaded[e] !== undefined ? (t && (loaded[e] =
                        function (e, t) {
                            return function () {
                                e && e(), t && t()
                            }
                        }(loaded[e], t)), this) : (loaded[e] = function (t) {
                        return function () {
                            loaded[e] = !0, t && t()
                        }
                    }(t), t = function () {
                        loaded[e]()
                    }, appendElmt("script", {
                        type: "text/javascript",
                        src: e,
                        id: a.i,
                        onerror: function (e) {
                            if (a.f) {
                                var i = e.currentTarget;
                                i.parentNode.removeChild(i), appendElmt("script", {
                                    type: "text/javascript",
                                    src: a.f,
                                    id: a.i
                                }, t)
                            }
                        }
                    }, t), this)
                },
                execJs: function (e, t) {
                    var a = urlParse(e);
                    return e = a.u, loaded[e] === !0 ? (t && t(), this) : loaded[e] !== undefined ? (t && (loaded[e] =
                        function (e, t) {
                            return function () {
                                e && e(), t && t()
                            }
                        }(loaded[e], t)), this) : (loaded[e] = function (t) {
                        return function () {
                            loaded[e] = !0, t && t()
                        }
                    }(t), t = function () {
                        loaded[e]()
                    }, ajaxExec(e, t, function () {
                        a.f && ajaxExec(a.f, t)
                    }), this)
                },
                loadcss: function (e, t) {
                    var a = urlParse(e);
                    return e = a.u, loaded[e] || appendElmt("link", {
                        type: "text/css",
                        rel: "stylesheet",
                        href: e,
                        id: a.i
                    }), loaded[e] = !0, t && t(), this
                },
                load: function () {
                    var e = arguments,
                        t = e[length];
                    return 1 === t && isA(e[0], Function) ? (e[0](), this) : (load.call(this, e[0], 1 >= t ?
                        undefined : function () {
                            loader.load.apply(loader, [].slice.call(e, 1))
                        }), this)
                },
                exec: function () {
                    var e = arguments,
                        t = e[length];
                    return 1 === t && isA(e[0], Function) ? (e[0](), this) : (exec.call(this, e[0], 1 >= t ?
                        undefined : function () {
                            loader.exec.apply(loader, [].slice.call(e, 1))
                        }), this)
                },
                addAliases: function (e) {
                    for (var t in e) this.aliases[t] = isA(e[t]) ? e[t].slice(0) : e[t];
                    return this
                }
            };
        if (checkLoaded) {
            var i, l, links, url;
            for (i = 0, l = scripts[length]; l > i; i++)(url = scripts[i].getAttribute("src")) && (loaded[url.replace(
                /#.*$/, "")] = !0);
            for (links = D[getElementsByTagName]("link"), i = 0, l = links[length]; l > i; i++)("stylesheet" === links[
                i].rel || "text/css" === links[i].type) && (loaded[links[i].getAttribute("href").replace(/#.*$/, "")] = !
                0)
        }
        window.ljs = loader
    }
    scriptTag.src && script && appendElmt("script", {
        innerHTML: script
    })
}(window);